{"version":3,"sources":["bank_search/providers/BlankBankProvider.js","bank_search/hooks/useBlankBankIndexContext.js","utils/request_utils.js","bank_search/api/fetchBanks.js","bank_search/components/BlankBankCityPicker.js","common/components/loader.js","common/components/blankComponent.js","common/components/pagination.js","common/components/modal.js","bank_search/components/BlankBankShow.js","bank_search/components/BlankBankList.js","common/components/toast.js","bank_search/components/BlankBankIndex.js","bank_search/hooks/useBlankBankFetch.js","bank_search/constants/actions.js","bank_search/hooks/useBlankBankList.js","bank_search/reducers/initalState.js","bank_search/reducers/blankBankReducer.js","bank_search/containers/BlankBankContainer.js","App.js","serviceWorker.js","index.js"],"names":["BlankBankContext","React","createContext","BlankBankProvider","Provider","useBlankBankIndexContext","blankBankContext","useContext","state","dispatch","API","methods","_BASE_URL","_method","call","url","options","onSuccess","onFailure","prepareURL","method","fetch","then","res","json","catch","err","startsWith","query","qs","stringify","fetchBanks","city","BlankBankCityPicker","props","citiesList","selectedCity","onCitySelect","searchParams","className","type","data-toggle","aria-haspopup","aria-expanded","map","c","key","value","onClick","onChange","handleSearch","onKeyPress","e","preventDefault","onSearch","placeholder","Loader","isLoading","style","width","height","role","Fragment","BlankComponent","paginationSettings","Pagination","pageValues","numberOfPages","currentPage","visibleRange","delta","_","range","push","i","concat","Math","ceil","getVisibleRange","listSize","showSize","page","pages","undefined","length","pageValue","index","isNaN","data-id","toString","onPageClick","aria-label","onPrevClick","aria-hidden","onNextClick","defaultProps","pageSizeOptions","Modal","visible","title","children","tabIndex","aria-labelledby","display","zIndex","onClose","data-dismiss","footer","BlankBankShow","bank","bank_name","address","BlankBankList","pageSettings","useState","tab","setTab","setPage","showModal","setShowModal","selectedBank","setSelectedBank","banks","bankList","startIndex","pagedBanks","slice","favClassHelper","ifsc","favouriteList","handleSizeChange","bank_id","onBankClick","branch","stopPropagation","onFavourite","Toast","timeout","show","setTimeout","duration","headerClassName","ToastTypes","error","info","getHeaderClassName","position","top","right","clearTimeout","content","BlankBankIndex","console","log","searchParam","useEffect","window","localStorage","getItem","setItem","cache","favouriteListFromLocal","favouriteListHash","split","useBlankBankFetch","filteredBanks","filter","useBlankBankList","present","target","p","initialState","name","ifscCode","branchName","district","filterBanks","search","toLowerCase","b","includes","blankBankReducer","nextState","action","Object","keys","k","BlankBankContainer","useReducer","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f900ce07.chunk.js","sourcesContent":["import React from 'react';\n\nexport const BlankBankContext = React.createContext({});\nexport const BlankBankProvider = BlankBankContext.Provider;","  \nimport { useContext } from \"react\";\nimport { BlankBankContext } from \"../providers/BlankBankProvider\";\n\nexport const useBlankBankIndexContext = () => {\n  const blankBankContext = useContext(BlankBankContext);\n  \n  return {\n      state: blankBankContext[0],\n      dispatch: blankBankContext[1]\n  }\n};\n","import qs from \"querystring\";\n\nclass API {\n    static methods = { \"GET\": \"GET\", \"POST\": \"POST\", \"DELETE\": \"DELETE\", \"PUT\": \"PUT\" };\n    static _BASE_URL = \"https://vast-shore-74260.herokuapp.com\";\n    static _method = \"GET\";\n\n    static call = (url, options={}, onSuccess=null, onFailure=null) => {\n        url = this.prepareURL(url, options);\n        let method = options.method ? options.method : this._method;\n\n        fetch(url, {method})\n        .then(res => res.json())\n        .then(res => {\n            if(onSuccess) onSuccess(res)\n        })\n        .catch(err => {\n            if(onFailure) onFailure(err);\n        });\n    }\n\n    static prepareURL = (url, options) => {\n        if(!url.startsWith(\"/\"))\n            url = `/${url}`;\n        \n        if(options.query) {\n            url += `?${qs.stringify(options.query)}`;\n        }\n\n        return this._BASE_URL + url;\n    }\n}\n\nexport default API;","import API from \"../../utils/request_utils\";\n\nexport const fetchBanks = (city, onSuccess, onFailure) => {\n    const options = {\n        query: {city}\n    }\n    if(city)\n        API.call(\"/banks\", options, onSuccess, onFailure);\n}","import React from \"react\";\n\nconst BlankBankCityPicker = props => {\n    const { citiesList, selectedCity, onCitySelect, searchParams } = props;\n\n    const handleKeyPress = e => {\n        if(e.key === 'Enter') {\n            e.preventDefault();\n            props.onSearch();\n        }\n    }\n    \n    return <form>\n        <div className=\"input-group mb-3\">\n            <div className=\"input-group-prepend\">\n                <button className=\"btn btn-outline-secondary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">{selectedCity ? selectedCity : \"Choose city\"}</button>\n                <div className=\"dropdown-menu\">\n                    {citiesList.map(c => <button key={c} value={c} onClick={onCitySelect} className=\"dropdown-item\">{c}</button>)}\n                </div>\n            </div>\n            <input type=\"text\" value={searchParams} onChange={props.handleSearch} onKeyPress={handleKeyPress} className=\"form-control\" placeholder=\"Search\" />\n        </div>\n    </form>\n}\n\nexport default BlankBankCityPicker;","import React from 'react';\n\nconst Loader = props => {\n    if (props.isLoading) {\n        return <div className=\"container p-5 m-auto text-center\">\n            <div className=\"spinner-grow\" style={{width: \"3rem\", height: \"3rem\"}} role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </div>\n        </div>\n    } else {\n        return <React.Fragment></React.Fragment>\n    }\n}\n\nexport default Loader;","import React from 'react';\n\nconst BlankComponent = props => {\n    return <React.Fragment>\n        <div className=\"container p-5 text-center\">\n            <div className=\"d-block\">\n                <i className=\"fa fa-paper-plane fa-5x\"></i>\n            </div>\n            <h5 className=\"mt-4\">Nothing to display</h5>\n        </div>\n    </React.Fragment>\n}\n\nexport default BlankComponent;","import React from 'react';\nimport _ from 'underscore';\nimport PropTypes from 'prop-types'\n\nconst paginationSettings = {\n    visibleRange: 3,\n    delta: 2\n};\n\nconst getVisibleRange = (numberOfPages, currentPage) => {\n    let pageValues = [];\n    const visibleRange = paginationSettings.visibleRange;\n    const delta = paginationSettings.delta;\n    if (numberOfPages <= 1) {\n        return [];\n    }\n    if (numberOfPages < visibleRange + (2 * delta) + 2) {\n        pageValues = _.range(1, numberOfPages + 1);\n    }\n    else {\n        if (currentPage < visibleRange) {\n            pageValues = _.range(1, visibleRange + 1);\n            pageValues.push(\"...\");\n            for (let i = 0; i < delta; i++) {\n                pageValues.push(numberOfPages - delta + (i + 1));\n            }\n        }\n        else if (numberOfPages - currentPage < visibleRange) {\n            for (let i = 0; i < delta; i++) {\n                pageValues.push(i + 1);\n            }\n            pageValues.push(\"..\");\n            pageValues = pageValues.concat(_.range(numberOfPages - visibleRange, numberOfPages + 1));\n        }\n        else {\n            for (let i = 0; i < delta; i++) {\n                pageValues.push(i + 1);\n            }\n            pageValues.push(\"..\");\n            pageValues = pageValues.concat(_.range(Math.ceil(currentPage - visibleRange / 2), currentPage));\n            pageValues = pageValues.concat(_.range(currentPage, Math.ceil(currentPage + visibleRange / 2)));\n            pageValues.push(\"..\");\n            for (let i = 0; i < delta; i++) {\n                pageValues.push(numberOfPages - delta + (i + 1));\n            }\n        }\n    }\n    return pageValues;\n}\nconst Pagination = (props) => {\n    const numberOfPages = Math.ceil(props.listSize / props.showSize);\n    let pageValues = getVisibleRange(numberOfPages, props.page);\n    let pages = undefined;\n    if (pageValues) {\n        if (pageValues.length > 0) {\n            pages = _.map(pageValues, (pageValue, index) => {\n                return (\n                    <li key={index} className={(pageValue === props.page ? \"active\" : \"\") + (isNaN(pageValue) ? \" unavailable\" : \"\") + \" page-item\"}>\n                        <button className=\"page-link\" data-id={pageValue.toString()} onClick={isNaN(pageValue.toString()) || (pageValue === props.page) ? null : (e) => props.onPageClick(pageValue)}>{isNaN(pageValue) ? (<span className=\"gap\">{pageValue.toString()}</span>) : (<span>{pageValue}</span>)}</button>\n                    </li>\n                )\n            });\n        }\n        if (props.listSize === 0) { return null; }\n        return (\n            <nav aria-label=\"card-footer-pagination Page navigation example\">\n                <ul className=\"pagination d-flex flex-wrap\">\n                    {\n                        pageValues.length > 0 &&\n                        <li className=\"page-item\">\n                            <button className=\"page-link\" onClick={props.onPrevClick} aria-label=\"Previous\">\n                                <span aria-hidden=\"true\">&laquo;</span>\n                                <span className=\"sr-only\">Previous</span>\n                            </button>\n                        </li>\n                    }\n                    {pages}\n                    {\n                        pageValues.length > 0 &&\n                        <li className=\"page-item\">\n                            <button className=\"page-link\" onClick={props.onNextClick} aria-label=\"Next\">\n                                <span aria-hidden=\"true\">&raquo;</span>\n                                <span className=\"sr-only\">Next</span>\n                            </button>\n                        </li>\n                    }\n                </ul>\n            </nav>\n        )\n    }\n    return \"\";\n}\n\nPagination.propTypes = {\n    listSize: PropTypes.number.isRequired,\n    showSize: PropTypes.number.isRequired,\n    page: PropTypes.number.isRequired,\n    handleSizeChange: PropTypes.func.isRequired,\n    onPageClick: PropTypes.func.isRequired,\n    onPrevClick: PropTypes.func.isRequired,\n    onNextClick: PropTypes.func.isRequired\n}\n\nPagination.defaultProps = {\n    pageSizeOptions: [10, 50, 100]\n}\n\nexport default Pagination;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Modal = props => {\n    const { visible, title, children } = props;\n    if(!visible) {\n        return <React.Fragment></React.Fragment>\n    }\n    return <div className=\"modal fade show\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalCenterTitle\" aria-hidden={visible ? \"false\" : \"true\"} style={{ display: visible ? \"block\" : \"none\" }}>\n        <div className=\"modal-dialog modal-dialog-centered\" role=\"document\" style={{ zIndex: 10000 }}>\n            <div className=\"modal-content\">\n                <div className=\"modal-header\">\n                    <h5 className=\"modal-title text-primary\">{title}</h5>\n                    <button type=\"button\" onClick={props.onClose} className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                </div>\n                <div className=\"modal-body\">\n                    {children}\n                </div>\n                {\n                    props.footer &&\n                        <div className=\"modal-footer\">\n                            {props.footer}\n                        </div>\n                }\n            </div>\n        </div>\n        <div\n            className=\"modal-backdrop fade show\"\n            role=\"presentation\"\n            onClick={props.onClose}\n        />\n    </div>\n}\n\nModal.propTypes = {\n    visible: PropTypes.bool.isRequired,\n    title: PropTypes.string,\n    children: PropTypes.element\n}\n\nModal.defaultProps = {\n    visible: true,\n    title: \"Modal title\",\n    children: <p>modal is great body</p>\n}\n\nexport default Modal;","import React from 'react';\n\nconst BlankBankShow = props => {\n    const { bank } = props;\n    return <div className=\"d-flex flex-column\">\n        <h5>{bank.bank_name}</h5>\n        <small>{bank.address}</small>\n    </div>\n}\n\nexport default BlankBankShow;","import React, { useState } from 'react';\nimport BlankComponent from '../../common/components/blankComponent';\nimport Pagination from '../../common/components/pagination';\nimport Modal from '../../common/components/modal';\nimport BlankBankShow from './BlankBankShow';\n\nconst BlankBankList = props => {\n    const pageSettings = {\n        page: props.page ? props.page : 1,\n        showSize: props.showSize ? props.showSize : 10\n    }\n\n    const [tab, setTab] = useState(0);\n    const { page, showSize } = pageSettings;\n    const { setPage } = props;\n    const [showModal, setShowModal] = useState(false);\n    const [selectedBank, setSelectedBank] = useState({});\n\n    const { bankList } = props;\n\n    let banks = bankList[tab];\n    let startIndex = showSize*(page - 1);\n    let pagedBanks = banks.slice(startIndex, startIndex + showSize)\n\n    const favClassHelper = ifsc => {\n        if (props.favouriteList[ifsc]) {\n            return \"fa-heart\";\n        }\n\n        return \"fa-heart-o\";\n    }\n\n    const onBankClick = bank => {\n        setSelectedBank(bank);\n        setShowModal(true);\n    }\n\n    return <React.Fragment>\n        <div className=\"row mt-3\">\n            <div className=\"col\">\n                <div className=\"card shadow-sm\">\n                    <div className=\"card-header bg-white\">\n                        <ul className=\"nav nav-pills card-header-pills\">\n                            <li className=\"nav-item btn-sm\">\n                                <button onClick={() => setTab(0)} className={`nav-link ${tab === 0 ? 'active' : ''}`}>\n                                    <i className=\"fa fa-globe mr-2\"></i>ALL\n                                </button>\n                            </li>\n                            <li className=\"nav-item btn-sm\">\n                                <button onClick={() => {setPage(1); setTab(1)}} className={`nav-link ${tab === 1 ? 'active' : ''}`}>\n                                    <i className=\"fa fa-heart-o mr-2\"></i>FAVOURITES\n                                </button>\n                            </li>\n                        </ul>\n                    </div>\n                    <div className=\"card-body\">\n                        {banks.length > showSize && \n                            <div className=\"d-flex flex-row justify-content-between\">\n                                <h6 className=\"mt-3 m-none\">Showing {showSize} of {banks.length}</h6>\n                                <Pagination \n                                    listSize={banks.length}\n                                    showSize={showSize}\n                                    page={page}\n                                    handleSizeChange={() => {}}\n                                    onNextClick={() => {setPage(page + 1)}}\n                                    onPrevClick={() => {setPage(page - 1)}}\n                                    onPageClick={page => setPage(page)}\n                                />\n                            </div>\n                        }\n                        <div className=\"row mt-3\">\n                            {\n                                pagedBanks.length > 0 ? pagedBanks.map(bank =>\n                                    <div key={`bank-${bank.bank_id}-${bank.bank_name}-${bank.ifsc}`} className=\"col mb-3\">\n                                        <div onClick={() => onBankClick(bank)} className=\"card pointer\">\n                                            <div className=\"card-body\">\n                                                <h5 className=\"card-title\">{bank.bank_name}</h5>\n                                                <h6 className=\"card-subtitle mb-2 text-primary\">{bank.ifsc}</h6>\n                                                <small className=\"\">{bank.branch}</small><br/>\n                                                <small className=\"text-muted\">{bank.state}</small>\n                                                <div className=\"d-block text-right\">\n                                                    <button onClick={(e) => {e.stopPropagation(); props.onFavourite(bank.ifsc)}} className={`border-0 bg-transparent text-danger fa ${favClassHelper(bank.ifsc)}`}></button>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                ) : <BlankComponent />\n                            }\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <Modal \n            visible={showModal} \n            title={selectedBank.ifsc} \n            children={<BlankBankShow bank={selectedBank} />} \n            onClose={() => setShowModal(false)}\n            footer={\n                <div className=\"w-100 d-flex justify-content-between\">\n                    <small className=\"text-left text-muted\">{`${selectedBank.city} | ${selectedBank.state}`}</small>\n                    <i onClick={() => props.onFavourite(selectedBank.ifsc)} className={`text-danger fa ${favClassHelper(selectedBank.ifsc)}`}></i>\n                </div>\n            }\n        />\n    </React.Fragment>\n}\n\nexport default BlankBankList;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Toast = props => {\n    const getHeaderClassName = type => {\n        if (type) {\n            if (type === Toast.ToastTypes.error) {\n                return \"bg-danger\";\n            } else if (type === Toast.ToastTypes.info) {\n                return \"bg-info\";\n            }\n        }\n\n        return \"bg-info\"\n    }\n\n    let timeout = null;\n\n    if (props.show) {\n        timeout = setTimeout(() => {\n            props.onClose();\n        }, props.duration);\n    }\n\n    const onClose = () => {\n        if (timeout) {\n            clearTimeout(timeout);\n        }\n\n        props.onClose();\n    }\n\n\n    const headerClassName = getHeaderClassName(props.type);\n\n    return <React.Fragment>\n        <div className={`toast ${props.show ? 'show' : ''}`} style={{ position: \"absolute\", top: 10, right: 10, width: '18%' }}>\n            <div className={`toast-header text-white ${headerClassName}`}>\n                <span className=\"toast-icon rounded bg-white mr-2\"></span>\n                <strong className=\"mr-auto\">{props.title}</strong>\n                <button onClick={(e) => onClose()} type=\"button\" className=\"ml-2 text-white close\" data-dismiss=\"toast\" aria-label=\"Close\">\n                    <span aria-hidden=\"true\">&times;</span>\n                </button>\n            </div>\n            <div className=\"toast-body\">{props.content}</div>\n        </div>\n    </React.Fragment>\n}\n\nToast.propTypes = {\n    show: PropTypes.bool.isRequired,\n    title: PropTypes.string.isRequired,\n    content: PropTypes.string.isRequired,\n    onClose: PropTypes.func.isRequired,\n    type: PropTypes.string.isRequired,\n    duration: PropTypes.number.isRequired\n}\n\nToast.ToastTypes = {\n    info: \"INFO\",\n    error: \"ERROR\",\n};\n\nToast.defaultProps = {\n    show: true,\n    title: \"Toast header\",\n    content: \"Toast body\",\n    type: Toast.ToastTypes.error,\n    duration: 4000\n}\n\nexport default Toast;","import React, { useState } from 'react';\nimport * as Action from \"../constants/actions\";\nimport { useBlankBankFetch } from '../hooks/useBlankBankFetch';\nimport BlankBankCityPicker from './BlankBankCityPicker';\nimport Loader from '../../common/components/loader';\nimport BlankBankList from './BlankBankList';\nimport { useBlankBankList } from '../hooks/useBlankBankList';\nimport Toast from '../../common/components/toast';\n\nconst BlankBankIndex = props => {\n    console.log(\"Render: \", props);\n    const { citiesList, selectedCity, isLoading, favouriteList, searchParam } = props.state;\n    const { error } = props.state;\n    const [page, setPage] = useState(1);\n\n    useBlankBankFetch(selectedCity);\n\n    const bankList = useBlankBankList();\n\n    const onCitySelect = e => {\n        e.preventDefault();\n        props.dispatch({\n            type: Action.SELECTED_CITY,\n            value: e.target.value\n        });\n    }\n\n    const onFavourite = ifsc => {\n        props.dispatch({\n            type: Action.TOGGLE_FAVOURITE,\n            value: ifsc.toString()\n        });\n    }\n\n    const onSearch = () => {\n        props.dispatch({ type: Action.ON_SEARCH });\n    }\n\n    const handleSearch = e => {\n        props.dispatch({\n            type: Action.HANDLE_SEARCH_PARAM,\n            value: e.target.value\n        });\n        setPage(1);\n    }\n\n    return (\n        <div className=\"container p-5 border-left border-right\">\n            <Toast \n                show={error.present}\n                title={error.info.title}\n                type={Toast.ToastTypes.error}\n                content={error.info.content}\n                onClose={() => props.dispatch({type: Action.CLEAR_ERROR})}\n            />\n            <BlankBankCityPicker\n                onCitySelect={onCitySelect}\n                selectedCity={selectedCity}\n                citiesList={citiesList}\n                searchParams={searchParam}\n                handleSearch={handleSearch}\n                onSearch={onSearch}\n            />\n            <Loader isLoading={isLoading} />\n            {\n                !isLoading &&\n                <BlankBankList\n                    bankList={bankList}\n                    page={page}\n                    setPage={p => setPage(p)}\n                    favouriteList={favouriteList}\n                    onFavourite={onFavourite}\n                />\n            }\n        </div>\n    );\n}\n\nexport default BlankBankIndex;","import { useEffect } from \"react\";\nimport { useBlankBankIndexContext } from \"./useBlankBankIndexContext\";\nimport * as Action from \"../constants/actions\";\nimport { fetchBanks } from \"../api/fetchBanks\";\n\nexport const useBlankBankFetch = (dependency = []) => {\n    const { state, dispatch } = useBlankBankIndexContext();\n\n    useEffect(() => {\n        if(!state.selectedCity) {\n            dispatch({\n                type: Action.SELECTED_CITY,\n                value: window.localStorage.getItem('selected-city')\n            });\n        }\n\n        if (state.selectedCity) {\n            window.localStorage.setItem('selected-city', state.selectedCity.toString())\n            dispatch({ type: Action.IS_LOADING_TRUE });\n        }\n\n        if (state.cache[state.selectedCity]) {\n            dispatch({\n                type: Action.SUCCESSFUL_BANK_FETCH,\n                value: state.cache[state.selectedCity]\n            });\n            dispatch({ type: Action.IS_LOADING_FALSE });\n        } else {\n            fetchBanks(state.selectedCity, (res) => {\n                dispatch({\n                    type: Action.SUCCESSFUL_BANK_FETCH,\n                    value: res\n                });\n                dispatch({ type: Action.IS_LOADING_FALSE });\n            }, (err) => {\n                dispatch({\n                    type: Action.FAILED_BANK_FETCH,\n                    value: err\n                });\n                dispatch({ type: Action.IS_LOADING_FALSE });\n            });\n        }\n\n        let favouriteListFromLocal = window.localStorage.getItem('favourite-list')\n\n        if(favouriteListFromLocal) {\n            let favouriteListHash = {}\n            for(let fav of favouriteListFromLocal.split(\",\")) {\n                favouriteListHash[fav] = true;\n            }\n\n            dispatch({\n                type: Action.UPDATE_FAVOURITE_FROM_LOCAL,\n                value: favouriteListHash,\n            });\n        }\n        \n    }, [state.selectedCity, dispatch, state.cache]);\n}","export const SELECTED_CITY = \"SELECTED_CITY\";\nexport const SUCCESSFUL_BANK_FETCH = \"SUCCESSFUL_BANK_FETCH\";\nexport const FAILED_BANK_FETCH = \"FAILED_BANK_FETCH\";\nexport const CLEAR_ERROR = \"CLEAR_ERROR\";\nexport const IS_LOADING_TRUE = \"IS_LOADING_TRUE\";\nexport const IS_LOADING_FALSE = \"IS_LOADING_FALSE\";\nexport const TOGGLE_FAVOURITE = \"TOGGLE_FAVOURITE\";\nexport const HANDLE_SEARCH_PARAM = 'HANDLE_SEARCH_PARAM';\nexport const UPDATE_FAVOURITE_FROM_LOCAL = \"UPDATE_FAVOURITE_FROM_LOCAL\";\nexport const ON_SEARCH = \"ON_SEARCH\";","import { useBlankBankIndexContext } from \"./useBlankBankIndexContext\";\n\nexport const useBlankBankList = () => {\n    const { state } = useBlankBankIndexContext();\n    let allBanks = state.filteredBanks;\n    let favouriteBanks = state.filteredBanks.filter(bank => state.favouriteList[bank.ifsc])\n\n    return [allBanks, favouriteBanks];\n}","const initialState = {\n    isLoading: false,\n    selectedCity: null,\n    citiesList: [\n        \"MUMBAI\",\n        \"COIMBATORE\",\n        \"BANGALORE\",\n        \"CHENNAI\",\n        \"DELHI\"\n    ],\n    banks: [],\n    bank: {\n        name: \"\",\n        ifscCode: \"\",\n        branchName: \"\",\n        district: \"\",\n        state: \"\"\n    },\n    favouriteList: {},\n    filteredBanks: [],\n    searchParam: '',\n    cache: {},\n    error: {\n        present: false,\n        info: {\n            title: '',\n            content: ''\n        }\n    }\n}\n\nexport default initialState;","import * as Action from \"../constants/actions\";\nimport initialState from \"./initalState\";\n\nconst filterBanks = (state) => {\n    const search = state.searchParam.toLowerCase();\n    if(search.length <= 0) {\n        return state.banks;\n    }\n    return state.banks.filter(b => \n        b.bank_name.toLowerCase().includes(search) ||\n        b.ifsc.toLowerCase().includes(search) ||\n        b.state.toLowerCase().includes(search) ||\n        b.branch.toLowerCase().includes(search) ||\n        b.address.toLowerCase().includes(search) ||\n        b.city.toLowerCase().includes(search) || \n        b.district.toLowerCase().includes(search)\n    );\n}\n\nexport const blankBankReducer = (nextState, action) => {\n    switch(action.type) {\n        case Action.SELECTED_CITY:\n            nextState.selectedCity = action.value;\n            break;\n        case Action.SUCCESSFUL_BANK_FETCH:\n            nextState.banks = action.value;\n            nextState.filteredBanks = filterBanks(nextState);\n            nextState.cache[nextState.selectedCity] = action.value;\n            break;\n        case Action.FAILED_BANK_FETCH:\n            let error = {...nextState.error};\n            error.present = true;\n            error.info = {\n                title: 'Failed to fetch banks',\n                content: action.value.toString(),\n            }\n            nextState = {...nextState, error};\n            break;\n        case Action.CLEAR_ERROR:\n            nextState = {...nextState, error: initialState.error};\n            break;\n        case Action.IS_LOADING_TRUE:\n            nextState.isLoading = true;\n            break;\n        case Action.IS_LOADING_FALSE:\n            nextState.isLoading = false;\n            break;\n        case Action.HANDLE_SEARCH_PARAM:\n            nextState.searchParam = action.value;\n            nextState.filteredBanks = filterBanks(nextState);\n            break;\n        case Action.UPDATE_FAVOURITE_FROM_LOCAL:\n            nextState.favouriteList = action.value;\n            break;\n        case Action.ON_SEARCH:\n            break;\n        case Action.TOGGLE_FAVOURITE:\n            let ifscCode = action.value;\n            if(!nextState.favouriteList[ifscCode]) {\n                nextState.favouriteList[ifscCode] = true;\n                window.localStorage.setItem('favourite-list', Object.keys(nextState.favouriteList))\n            } else {\n                nextState.favouriteList[ifscCode] = false;\n                let _ = Object.keys(nextState.favouriteList);\n                _ = _.filter(k => nextState.favouriteList[k]);\n                window.localStorage.setItem('favourite-list', _);\n            }\n            break;\n        default:\n            return {...nextState};\n    }\n    return {...nextState};\n}","import React, { useReducer } from 'react';\nimport { BlankBankProvider } from '../providers/BlankBankProvider';\nimport BlankBankIndex from '../components/BlankBankIndex';\nimport { blankBankReducer } from '../reducers/blankBankReducer';\nimport initialState from '../reducers/initalState';\n\nconst BlankBankContainer = props => {\n    const state = useReducer(blankBankReducer, initialState);\n    return <BlankBankProvider value={state}>\n        <BlankBankIndex state={state[0]} dispatch={state[1]}  />\n    </BlankBankProvider>\n}\n\nexport default BlankBankContainer;","import React from 'react';\nimport BlankBankContainer from './bank_search/containers/BlankBankContainer';\n\n\nfunction App() {\n  return <BlankBankContainer />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}